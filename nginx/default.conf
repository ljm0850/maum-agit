# maum-agit/nginx/default.conf

# server 블록: 웹 서버의 설정을 정의합니다.
server {
    # listen: NginX가 어떤 포트로 클라이언트의 요청을 받을지 정의합니다.
    listen 80; # 웹에서 http://localhost 로 접속할 때 NginX가 80번 포트로 요청을 받습니다.

    # server_name: 이 서버 블록이 응답할 도메인 이름을 정의합니다.
    server_name localhost; # 개발 환경이므로 localhost를 사용합니다.

    # location / 블록: 모든 기본 요청을 처리합니다. (주로 Next.js 프론트엔드로 전달)
    location / {
        # proxy_pass: 클라이언트의 요청을 다른 서버(여기서는 Docker 컨테이너)로 전달합니다.
        # http://frontend:3000; 에서 'frontend'는 docker-compose.yml에 정의된 Next.js 서비스 이름이고,
        # 3000은 Next.js 개발 서버가 실행되는 포트입니다. Docker 내부 네트워크에서는 서비스 이름으로 접근 가능합니다.
        proxy_pass http://frontend:3000;

        # proxy_http_version 1.1; : HTTP/1.1 프로토콜을 사용하도록 설정합니다. (웹소켓 연결 시 필요)
        proxy_http_version 1.1;

        # proxy_set_header Upgrade $http_upgrade;
        # proxy_set_header Connection 'upgrade';
        # 웹소켓 연결(Next.js의 HMR 등)을 프록시하기 위해 필요한 헤더 설정입니다.
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';

        # proxy_set_header Host $host; : 클라이언트의 Host 헤더를 원래 요청된 Host 값으로 설정하여 프록시 대상 서버에 전달합니다.
        proxy_set_header Host $host;

        # proxy_cache_bypass $http_upgrade; : 웹소켓 업그레이드 시 캐시를 바이패스하도록 설정합니다.
        proxy_cache_bypass $http_upgrade;
    }

    # location /api/ 블록: /api/ 로 시작하는 요청을 처리합니다. (NestJS 백엔드로 전달)
    location /api/ {
        # rewrite: URL을 다시 작성하는 규칙입니다.
        # ^/api/(.*)$ /$1 break; 는 /api/ 로 시작하는 URL에서 /api/ 부분을 제거한 나머지 경로를 사용하도록 합니다.
        # 예를 들어, 클라이언트가 http://localhost/api/posts 로 요청하면, NestJS 서버에는 /posts 로 전달됩니다.
        rewrite ^/api/(.*)$ /$1 break;

        # proxy_pass: NestJS 백엔드 서비스인 'backend' 컨테이너의 3001번 포트로 요청을 전달합니다.
        proxy_pass http://backend:3001;

        # proxy_set_header Host $host; : 클라이언트의 Host 헤더를 원래 요청된 Host 값으로 설정하여 백엔드에 전달합니다.
        proxy_set_header Host $host;

        # proxy_set_header X-Real-IP $remote_addr;
        # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # proxy_set_header X-Forwarded-Proto $scheme;
        # 실제 클라이언트의 IP 주소와 프로토콜(http/https) 정보를 백엔드 서버에 전달하기 위한 헤더 설정입니다.
        # 백엔드 서버가 클라이언트의 실제 정보를 알 수 있도록 합니다.
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}