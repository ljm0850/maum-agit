version: '3.8' # Docker Compose 파일 형식의 버전. 일반적으로 최신 버전인 3.8을 사용합니다.

services: # 이 섹션 아래에 우리가 실행할 개별 서비스들을 정의합니다.
          # 각 서비스는 독립적인 컨테이너로 실행됩니다.

  nginx: # 1. NginX 서비스 정의 (리버스 프록시)
    container_name: maum_agit_nginx_dev # 이 컨테이너의 이름을 'maum_agit_nginx_dev'로 지정합니다. Docker 명령어로 관리할 때 편리합니다.
    image: nginx:alpine # 사용할 Docker 이미지 이름을 지정합니다. 여기서는 NginX의 경량 버전인 'nginx:alpine' 이미지를 사용합니다. (따로 Dockerfile을 빌드하지 않고 기존 이미지를 가져와 씁니다)
    ports: # 호스트(사용자 컴퓨터)의 포트와 컨테이너 내부의 포트를 연결합니다.
      - "80:80" # 호스트의 80번 포트로 들어오는 요청을 컨테이너의 80번 포트로 전달합니다. 웹 브라우저에서 localhost:80 (또는 그냥 localhost)로 접속하면 NginX에 연결됩니다.
    volumes: # 호스트의 파일/폴더를 컨테이너 내부에 마운트합니다. (실시간 동기화)
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro # 호스트의 './nginx/default.conf' 파일을 컨테이너 내부의 '/etc/nginx/conf.d/default.conf' 경로에 읽기 전용(ro)으로 마운트합니다. NginX 설정 파일을 컨테이너에 적용하기 위함입니다.
    depends_on: # 이 서비스가 시작되기 전에 먼저 시작되어야 할 다른 서비스들을 정의합니다.
      - frontend # NginX가 frontend로 요청을 전달해야 하므로, frontend가 먼저 떠 있어야 합니다.
      - backend  # NginX가 backend로 요청을 전달해야 하므로, backend가 먼저 떠 있어야 합니다.
    restart: always # 컨테이너가 어떤 이유로든 종료될 경우 항상 자동으로 재시작합니다.

  frontend: # 2. Frontend 서비스 정의 (Next.js 애플리케이션)
    container_name: maum_agit_frontend_dev # 컨테이너 이름
    build: # 이 서비스의 Docker 이미지를 어떻게 빌드할지 정의합니다.
      context: ./frontend # Dockerfile을 찾을 경로. './frontend' 디렉토리에서 Dockerfile을 찾으라는 의미입니다.
      dockerfile: Dockerfile.dev # 사용할 Dockerfile의 이름. 'frontend' 디렉토리 내의 'Dockerfile.dev' 파일을 사용합니다.
    ports: # 컨테이너 내부 포트를 외부에 노출합니다. (NginX가 이 포트로 통신합니다)
      - "3000:3000" # 컨테이너 내부의 3000번 포트를 외부에 3000번 포트로 연결합니다. NginX는 이 3000번 포트로 frontend에 접근합니다.
    volumes: # 호스트의 파일/폴더를 컨테이너 내부에 마운트합니다.
      - ./frontend:/app # 호스트의 './frontend' 디렉토리(Next.js 프로젝트 코드)를 컨테이너 내부의 '/app' 디렉토리에 마운트합니다. 이렇게 하면 로컬에서 코드 수정 시 컨테이너 내부에도 즉시 반영되어 핫 리로딩이 가능해집니다.
      - /app/node_modules # 중요: node_modules 폴더가 호스트의 파일로 덮어씌워지는 것을 방지합니다. 컨테이너 내부의 node_modules는 유지됩니다.
    env_file: # 이 서비스에서 사용할 환경 변수 파일을 지정합니다.
      - ./frontend/.env.local # 호스트의 './frontend/.env.local' 파일에 있는 환경 변수들을 컨테이너 내부로 로드합니다.
    depends_on: # 이 서비스가 시작되기 전에 먼저 시작되어야 할 다른 서비스들을 정의합니다.
      - backend # 프론트엔드가 백엔드 API를 호출해야 하므로, 백엔드가 먼저 떠 있어야 합니다.
    restart: always

  backend: # 3. Backend 서비스 정의 (NestJS 애플리케이션)
    container_name: maum_agit_backend_dev # 컨테이너 이름
    build: # 이 서비스의 Docker 이미지를 어떻게 빌드할지 정의합니다.
      context: ./backend # Dockerfile을 찾을 경로. './backend' 디렉토리에서 Dockerfile을 찾으라는 의미입니다.
      dockerfile: Dockerfile.dev # 사용할 Dockerfile의 이름. 'backend' 디렉토리 내의 'Dockerfile.dev' 파일을 사용합니다.
    ports: # 컨테이너 내부 포트를 외부에 노출합니다. (NginX가 이 포트로 통신합니다)
      - "3001:3001" # 컨테이너 내부의 3001번 포트를 외부에 3001번 포트로 연결합니다. NginX는 이 3001번 포트로 backend에 접근합니다.
    volumes: # 호스트의 파일/폴더를 컨테이너 내부에 마운트합니다.
      - ./backend:/app # 호스트의 './backend' 디렉토리(NestJS 프로젝트 코드)를 컨테이너 내부의 '/app' 디렉토리에 마운트합니다. 핫 리로딩 가능
      - /app/node_modules # node_modules 폴더가 호스트의 파일로 덮어씌워지는 것을 방지합니다.
    env_file: # 이 서비스에서 사용할 환경 변수 파일을 지정합니다.
      - ./backend/.env # 호스트의 './backend/.env' 파일에 있는 환경 변수들을 컨테이너 내부로 로드합니다.
    depends_on: # 이 서비스가 시작되기 전에 먼저 시작되어야 할 다른 서비스들을 정의합니다.
      - database # 백엔드가 데이터베이스에 연결해야 하므로, 데이터베이스가 먼저 떠 있어야 합니다.
    restart: always

  database: # 4. Database 서비스 정의 (MySQL 데이터베이스)
    container_name: maum_agit_mysql_dev # 컨테이너 이름
    image: mysql:8.0 # MySQL 공식 이미지 버전 8.0을 사용합니다.
    ports: # 로컬에서 직접 MySQL 클라이언트(예: MySQL Workbench, TablePlus)로 접속할 경우 필요합니다.
      - "3306:3306" # 호스트의 3306번 포트를 컨테이너의 3306번 포트에 연결 (MySQL 기본 포트)
    environment: # 컨테이너 내부에서 사용할 환경 변수들을 직접 정의합니다. (MySQL 설정용)
      MYSQL_ROOT_PASSWORD: root_password_dev # MySQL root 계정의 비밀번호
      MYSQL_USER: maum_agit_user # 새로 생성할 MySQL 사용자 이름
      MYSQL_PASSWORD: maum_agit_password # 새로 생성할 MySQL 사용자의 비밀번호
      MYSQL_DATABASE: maum_agit_db_dev # 새로 생성할 데이터베이스 이름
    volumes: # 데이터베이스 데이터의 영속성을 위해 볼륨을 마운트합니다.
      - db_data:/var/lib/mysql # 'db_data'라는 이름의 Docker 볼륨을 컨테이너 내부의 MySQL 데이터 저장 경로에 마운트합니다. 이렇게 하면 컨테이너를 삭제해도 데이터는 보존됩니다.
    # - ./mysql_init:/docker-entrypoint-initdb.d # 선택 사항: 이 줄의 주석을 풀면, 'mysql_init' 폴더 안에 있는 .sql 파일들을 컨테이너 시작 시 자동으로 실행하여 초기 스키마나 데이터를 로드할 수 있습니다.

volumes: # 이 섹션은 Docker에서 사용할 볼륨들을 정의합니다.
  db_data: # 위 'database' 서비스에서 사용될 'db_data' 볼륨을 선언합니다.